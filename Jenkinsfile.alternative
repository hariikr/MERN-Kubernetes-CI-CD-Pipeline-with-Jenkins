pipeline {
    agent none

    environment {
        DOCKER_REGISTRY = 'hariikr'
        IMAGE_TAG = "${BUILD_NUMBER}"
        KUBERNETES_SERVER = 'https://kubernetes.default.svc'
    }

    stages {
        stage('Checkout') {
            agent any
            steps {
                git branch: 'main',
                    url: 'https://github.com/hariikr/MERN-Kubernetes-CI-CD-Pipeline-with-Jenkins.git',
                    credentialsId: 'git'
                stash includes: '**', name: 'source-code'
            }
        }

        stage('Test') {
            parallel {
                stage('Test Backend') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            reuseNode false
                        }
                    }
                    steps {
                        unstash 'source-code'
                        dir('backend') {
                            sh '''
                                npm install
                                npm test
                            '''
                        }
                    }
                }

                stage('Test Frontend') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            reuseNode false
                        }
                    }
                    steps {
                        unstash 'source-code'
                        dir('frontend') {
                            sh '''
                                npm install
                                npm test
                            '''
                        }
                    }
                }
            }
        }

        stage('Build & Push Docker Images') {
            agent any
            steps {
                unstash 'source-code'
                script {
                    parallel(
                        "Backend Image": {
                            dir('backend') {
                                def backendImage = docker.build("${DOCKER_REGISTRY}/mern-backend:${IMAGE_TAG}")
                                docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                                    backendImage.push()
                                    backendImage.push('latest')
                                }
                            }
                        },
                        "Frontend Image": {
                            dir('frontend') {
                                def frontendImage = docker.build("${DOCKER_REGISTRY}/mern-frontend:${IMAGE_TAG}")
                                docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                                    frontendImage.push()
                                    frontendImage.push('latest')
                                }
                            }
                        }
                    )
                }
            }
        }

        stage('Deploy to Kubernetes') {
            agent any
            steps {
                unstash 'source-code'
                script {
                    sh """
                        sed -i 's|your-registry/mern-backend:latest|${DOCKER_REGISTRY}/mern-backend:${IMAGE_TAG}|g' k8s/backend-deployment.yaml
                        sed -i 's|your-registry/mern-frontend:latest|${DOCKER_REGISTRY}/mern-frontend:${IMAGE_TAG}|g' k8s/frontend-deployment.yaml
                        kubectl apply -f k8s/
                        kubectl rollout status deployment/backend-deployment
                        kubectl rollout status deployment/frontend-deployment
                    """
                }
            }
        }

        stage('Verify Deployment') {
            agent any
            steps {
                script {
                    sh 'kubectl get pods -o wide'
                    sh 'kubectl get services'
                    sh 'kubectl wait --for=condition=ready pod -l app=backend --timeout=300s'
                    sh 'kubectl wait --for=condition=ready pod -l app=frontend --timeout=300s'
                }
            }
        }
    }

    post {
        success { 
            echo 'üéâ Pipeline completed successfully!' 
        }
        failure { 
            echo '‚ùå Pipeline failed!' 
        }
        always { 
            node {
                script {
                    try {
                        sh 'docker system prune -f'
                    } catch (Exception e) {
                        echo "Docker cleanup failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }
}
